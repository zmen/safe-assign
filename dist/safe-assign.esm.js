function _typeof(r){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}function _slicedToArray(r,t){return _arrayWithHoles(r)||_iterableToArrayLimit(r,t)||_nonIterableRest()}function _arrayWithHoles(r){if(Array.isArray(r))return r}function _iterableToArrayLimit(r,t){var e=[],n=!0,o=!1,i=void 0;try{for(var l,f=r[Symbol.iterator]();!(n=(l=f.next()).done)&&(e.push(l.value),!t||e.length!==t);n=!0);}catch(r){o=!0,i=r}finally{try{n||null==f.return||f.return()}finally{if(o)throw i}}return e}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}var safeAssign=function l(f){if(isUndefOrNull(f))throw new Error("can not convert undefined or null to object");for(var r=arguments.length,t=new Array(1<r?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];return t.forEach(function(r){if(!isUndefOrNull(r)){if(isPrimitives(r))throw new Error("source can not be primitives");for(var t=0,e=Object.entries(r);t<e.length;t++){var n=_slicedToArray(e[t],2),o=n[0],i=n[1];isPrimitives(i)?_typeof(i)!==_typeof(f[o])&&void 0!==f[o]||(f[o]=i):(void 0===f[o]&&(f[o]=Object.create(null)),l(f[o],i))}}}),f};function isUndefOrNull(r){return null==r}function isPrimitives(r){return"object"!==_typeof(r)}module.exports=safeAssign;
